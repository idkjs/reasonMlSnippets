// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var IsomorphicFetch = require("isomorphic-fetch");
var Auto = require("../../../src/js/auto");
var Fetcher = require("../../../src/js/fetcher");
var TestModule = require("../../../src/js/testModule");

var result = (3 + 4);

console.log(result);

var add = ((x, y)=> x+ y);

console.log(add(3, 99));

const minus = (x,y) => x-y
;

console.log(minus(100, 1));

const testVar = 444
;

console.log(testVar);

var a = [
  "a",
  "b"
];

function createAuto(prim) {
  return new Auto(prim);
}

var meineLimo = new Auto("meineLimo");

console.log(meineLimo);

meineLimo.fahren("Garage");

console.log(meineLimo);

var ente = new Auto("ente").fahren("CasaNoir").fahren("Hawaii").fahren("Rom");

const logMe = (object) => console.log(JSON.stringify(object))
;

logMe([
      "erster",
      "zweiter",
      "dritter"
    ]);

function testRecordToJs(param) {
  return {
          x: param.x,
          y: param.y
        };
}

function testRecordFromJs(param) {
  return {
          x: param.x,
          y: param.y
        };
}

var testData = {
  x: 4,
  y: 5
};

logMe(testRecordToJs(testData));

function wattToJs(param) {
  return {
          was: param.was,
          stunden: param.stunden
        };
}

function wattFromJs(param) {
  return {
          was: param.was,
          stunden: param.stunden
        };
}

const gibMal = () => ({ was: 'ist los?', stunden: 33 })
;

var wattRecord = wattFromJs(gibMal());

console.log(wattRecord.was);

console.log(wattRecord.stunden);

function logNochmal(prim) {
  TestModule.machWas(prim);
  
}

TestModule.machWas("YOLO");

function handleProductData(data) {
  var names = $$Array.map((function (p) {
          return p.name;
        }), data.products);
  console.log("Obst-Produkte aus der API:");
  console.log(names.join(", "));
  
}

IsomorphicFetch("https://api.predic8.de:443/shop/products/").then(function (response) {
        return response.json();
      }).then(function (data) {
      return Promise.resolve(handleProductData(data));
    });

function fetchResponseToJs(param) {
  return {
          one: param.one,
          key: param.key
        };
}

function fetchResponseFromJs(param) {
  return {
          one: param.one,
          key: param.key
        };
}

Fetcher.fetchJson("http://echo.jsontest.com/key/value/one/two").then(function (data) {
        return Promise.resolve(fetchResponseFromJs(data));
      }).then(function (recordData) {
      return Promise.resolve((console.log("value with key \"one\" : " + recordData.one + "\nvalue with key \"key\" : " + recordData.key), undefined));
    });

var emptyObject = {};

emptyObject["name"] = "Max Meyer";

emptyObject["age"] = "ss8";

var a$1 = Js_dict.get(emptyObject, "age");

var age = a$1 !== undefined ? a$1 : "";

console.log(age);

const johnny = {name:'Johnny'};
;

console.log("Johnny : " + johnny.name);

johnny.name = "Jane";

johnny.age = johnny.age + 1 | 0;

console.log("Johnny : " + johnny.name);

console.log("Age : " + String(johnny.age));

require('isomorphic-fetch')
;

function dataHandler(data) {
  console.log("self defined type -> data.one : " + data.one);
  console.log("self defined type -> data.key : " + data.key);
  
}

fetch("http://echo.jsontest.com/key/value/one/two").then(function (response) {
        return response.json();
      }).then(function (data) {
      return Promise.resolve(dataHandler(data));
    });

var f = 0.0;

var s = "s";

var t = [
  "adada",
  33,
  "zz"
];

exports.result = result;
exports.add = add;
exports.f = f;
exports.s = s;
exports.a = a;
exports.t = t;
exports.createAuto = createAuto;
exports.meineLimo = meineLimo;
exports.ente = ente;
exports.testRecordToJs = testRecordToJs;
exports.testRecordFromJs = testRecordFromJs;
exports.testData = testData;
exports.wattToJs = wattToJs;
exports.wattFromJs = wattFromJs;
exports.wattRecord = wattRecord;
exports.logNochmal = logNochmal;
exports.handleProductData = handleProductData;
exports.fetchResponseToJs = fetchResponseToJs;
exports.fetchResponseFromJs = fetchResponseFromJs;
exports.emptyObject = emptyObject;
exports.age = age;
exports.dataHandler = dataHandler;
/* result Not a pure module */
