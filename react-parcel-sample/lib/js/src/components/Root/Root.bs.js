// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array                       = require("bs-platform/lib/js/array.js");
var Block                         = require("bs-platform/lib/js/block.js");
var Curry                         = require("bs-platform/lib/js/curry.js");
var React                         = require("react");
var Pervasives                    = require("bs-platform/lib/js/pervasives.js");
var ReasonReact                   = require("reason-react/lib/js/src/ReasonReact.js");
var Utils$ReactParcelSample       = require("../../utils.bs.js");
var TodoInput$ReactParcelSample   = require("./components/TodoInput.bs.js");
var RootHeader$ReactParcelSample  = require("./components/RootHeader.bs.js");
var TodoButton$ReactParcelSample  = require("./components/TodoButton.bs.js");
var RootReducer$ReactParcelSample = require("./rootReducer.bs.js");

function printItemStatus(itemStatus) {
  if (itemStatus) {
    return "Erledigt am: " + (String(itemStatus[0]) + "");
  } else {
    return "Offen";
  }
}

var component = ReasonReact.reducerComponent("Root");

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      return React.createElement("div", {
                  className: "container"
                }, ReasonReact.element(/* None */0, /* None */0, RootHeader$ReactParcelSample.make(/* array */[])), React.createElement("div", {
                      className: "row"
                    }, React.createElement("div", {
                          className: "col"
                        }, ReasonReact.element(/* None */0, /* None */0, TodoInput$ReactParcelSample.make(self[/* state */2][/* newItem */2][/* itemName */1], Curry._1(self[/* reduce */1], (function ($$event) {
                                        return /* UpdateNewItem */Block.__(0, [$$event.target.value]);
                                      })), /* array */[])), ReasonReact.element(/* None */0, /* None */0, TodoButton$ReactParcelSample.make(/* Some */["plus"], /* None */0, "Add", Curry._1(self[/* reduce */1], (function () {
                                        return /* AddNewItem */0;
                                      })), /* array */[])))), React.createElement("table", {
                      className: "table table-light table-striped table-bordered table-hover"
                    }, React.createElement("thead", {
                          className: "thead-dark"
                        }, React.createElement("tr", undefined, React.createElement("th", undefined, Utils$ReactParcelSample.str("Item")), React.createElement("th", undefined, Utils$ReactParcelSample.str("Status")), React.createElement("th", undefined, Utils$ReactParcelSample.str("Actions")))), React.createElement("tbody", undefined, $$Array.map((function (item) {
                                return React.createElement("tr", {
                                            key: Pervasives.string_of_int(item[/* id */0])
                                          }, React.createElement("td", undefined, Utils$ReactParcelSample.str(item[/* itemName */1])), React.createElement("td", undefined, Utils$ReactParcelSample.str(printItemStatus(item[/* itemStatus */2]))), React.createElement("td", undefined, ReasonReact.element(/* None */0, /* None */0, TodoButton$ReactParcelSample.make(/* Some */["check-square"], /* Some */["btn btn-success mr-4"], "Check", Curry._1(self[/* reduce */1], (function () {
                                                              return /* CloseItem */Block.__(2, [item[/* id */0]]);
                                                            })), /* array */[])), ReasonReact.element(/* None */0, /* None */0, TodoButton$ReactParcelSample.make(/* Some */["trash"], /* Some */["btn btn-danger"], "Delete", Curry._1(self[/* reduce */1], (function () {
                                                              return /* DeleteItem */Block.__(1, [item[/* id */0]]);
                                                            })), /* array */[]))));
                              }), $$Array.of_list(self[/* state */2][/* todolist */1])))));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* idCounter */0,
              /* todolist : [] */0,
              /* newItem */RootReducer$ReactParcelSample.initialState
            ];
    });
  newrecord[/* reducer */12] = RootReducer$ReactParcelSample.rootReducer;
  return newrecord;
}

exports.printItemStatus = printItemStatus;
exports.component       = component;
exports.make            = make;
/* component Not a pure module */
