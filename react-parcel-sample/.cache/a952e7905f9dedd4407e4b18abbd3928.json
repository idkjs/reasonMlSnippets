{"dependencies":[{"name":"bs-platform/lib/js/list.js","loc":{"line":4,"column":26}},{"name":"bs-platform/lib/js/array.js","loc":{"line":5,"column":26}},{"name":"bs-platform/lib/js/block.js","loc":{"line":6,"column":26}},{"name":"bs-platform/lib/js/curry.js","loc":{"line":7,"column":26}},{"name":"react","loc":{"line":8,"column":26}},{"name":"bs-platform/lib/js/pervasives.js","loc":{"line":9,"column":26}},{"name":"reason-react/src/ReasonReact.js","loc":{"line":10,"column":26}}],"generated":{"js":"// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE\n'use strict';\n\nvar List = require(\"bs-platform/lib/js/list.js\");\nvar $$Array = require(\"bs-platform/lib/js/array.js\");\nvar Block = require(\"bs-platform/lib/js/block.js\");\nvar Curry = require(\"bs-platform/lib/js/curry.js\");\nvar React = require(\"react\");\nvar Pervasives = require(\"bs-platform/lib/js/pervasives.js\");\nvar ReasonReact = require(\"reason-react/src/ReasonReact.js\");\n\nvar component = ReasonReact.reducerComponent(\"Root\");\n\nfunction str(prim) {\n  return prim;\n}\n\nfunction printItemStatus(itemStatus) {\n  if (itemStatus) {\n    return \"Erledigt am: \" + (String(itemStatus[0]) + \"\");\n  } else {\n    return \"Offen\";\n  }\n}\n\nfunction createNewItem(id) {\n  return (/* record */[\n    /* id */id,\n    /* itemName */\"\",\n    /* itemStatus : Open */0]\n  );\n}\n\nfunction make() {\n  var newrecord = component.slice();\n  newrecord[/* render */9] = function (self) {\n    return React.createElement(\"div\", {\n      className: \"container\"\n    }, React.createElement(\"div\", {\n      className: \"jumbotron\"\n    }, React.createElement(\"h1\", undefined, \"Todo-App-Crap in React-Reason\")), React.createElement(\"div\", {\n      className: \"row\"\n    }, React.createElement(\"div\", {\n      className: \"col\"\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      value: self[/* state */2][/* newItem */2][/* itemName */1],\n      onChange: Curry._1(self[/* reduce */1], function ($$event) {\n        return (/* UpdateNewItem */Block.__(0, [$$event.target.value])\n        );\n      })\n    }), React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: Curry._1(self[/* reduce */1], function () {\n        return (/* AddNewItem */0\n        );\n      })\n    }, \"Add\"))), React.createElement(\"table\", {\n      className: \"table table-light table-striped table-bordered table-hover\"\n    }, React.createElement(\"thead\", {\n      className: \"thead-dark\"\n    }, React.createElement(\"tr\", undefined, React.createElement(\"th\", undefined, \"Item\"), React.createElement(\"th\", undefined, \"Status\"), React.createElement(\"th\", undefined, \"Actions\"))), React.createElement(\"tbody\", undefined, $$Array.map(function (item) {\n      return React.createElement(\"tr\", {\n        key: Pervasives.string_of_int(item[/* id */0])\n      }, React.createElement(\"td\", undefined, item[/* itemName */1]), React.createElement(\"td\", undefined, printItemStatus(item[/* itemStatus */2])), React.createElement(\"td\", undefined, React.createElement(\"button\", {\n        className: \"btn btn-success mr-4\",\n        onClick: Curry._1(self[/* reduce */1], function () {\n          return (/* CloseItem */Block.__(2, [item[/* id */0]])\n          );\n        })\n      }, React.createElement(\"i\", {\n        className: \"fa fa-check-square pr-2\"\n      }), \"Check\"), React.createElement(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: Curry._1(self[/* reduce */1], function () {\n          return (/* DeleteItem */Block.__(1, [item[/* id */0]])\n          );\n        })\n      }, React.createElement(\"i\", {\n        className: \"fa fa-trash pr-2\"\n      }), \"Delete\")));\n    }, $$Array.of_list(self[/* state */2][/* todolist */1])))));\n  };\n  newrecord[/* initialState */10] = function () {\n    return (/* record */[\n      /* idCounter */0,\n      /* todolist : [] */0,\n      /* newItem : record */[\n      /* id */0,\n      /* itemName */\"\",\n      /* itemStatus : Open */0]]\n    );\n  };\n  newrecord[/* reducer */12] = function (action, state) {\n    if (typeof action === \"number\") {\n      console.log(\"AddNewItem\");\n      var newId = state[/* idCounter */0] + 1 | 0;\n      var newItem_001 = /* itemName */state[/* newItem */2][/* itemName */1];\n      var newItem = /* record */[\n      /* id */newId, newItem_001,\n      /* itemStatus : Open */0];\n      return (/* Update */Block.__(0, [/* record */[\n        /* idCounter */newId,\n        /* todolist : :: */[newItem, state[/* todolist */1]],\n        /* newItem : record */[\n        /* id */newId,\n        /* itemName */\"\",\n        /* itemStatus : Open */0]]])\n      );\n    } else {\n      switch (action.tag | 0) {\n        case 0:\n          var itemName = action[0];\n          console.log(\"UpdateNewItem : \" + itemName);\n          var newItem$1 = state[/* newItem */2];\n          return (/* Update */Block.__(0, [/* record */[\n            /* idCounter */state[/* idCounter */0],\n            /* todolist */state[/* todolist */1],\n            /* newItem : record */[\n            /* id */newItem$1[/* id */0],\n            /* itemName */itemName,\n            /* itemStatus */newItem$1[/* itemStatus */2]]]])\n          );\n        case 1:\n          var id = action[0];\n          console.log(\"DeleteItem : \" + Pervasives.string_of_int(id));\n          return (/* Update */Block.__(0, [/* record */[\n            /* idCounter */state[/* idCounter */0],\n            /* todolist */List.filter(function (item) {\n              return +(item[/* id */0] !== id);\n            })(state[/* todolist */1]),\n            /* newItem */state[/* newItem */2]]])\n          );\n        case 2:\n          var id$1 = action[0];\n          console.log(\"CloseItem : \" + Pervasives.string_of_int(id$1));\n          var todolist = List.map(function (item) {\n            var match = +(item[/* id */0] === id$1);\n            if (match !== 0) {\n              return (/* record */[\n                /* id */item[/* id */0],\n                /* itemName */item[/* itemName */1],\n                /* itemStatus : Done */[\"jetzt\"]]\n              );\n            } else {\n              return item;\n            }\n          }, state[/* todolist */1]);\n          return (/* Update */Block.__(0, [/* record */[\n            /* idCounter */state[/* idCounter */0],\n            /* todolist */todolist,\n            /* newItem */state[/* newItem */2]]])\n          );\n\n      }\n    }\n  };\n  return newrecord;\n}\n\nexports.component = component;\nexports.str = str;\nexports.printItemStatus = printItemStatus;\nexports.createNewItem = createNewItem;\nexports.make = make;\n/* component Not a pure module */"},"hash":"8a0ae3ebc0a61099e8b1393f9fcaff44"}