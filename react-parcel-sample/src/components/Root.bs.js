// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List        = require("bs-platform/lib/js/list.js");
var $$Array     = require("bs-platform/lib/js/array.js");
var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var React       = require("react");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.reducerComponent("Root");

function str(prim) {
  return prim;
}

function printItemStatus(itemStatus) {
  if (itemStatus) {
    return "Erledigt am: " + (String(itemStatus[0]) + "");
  } else {
    return "Offen";
  }
}

function createNewItem(id) {
  return /* record */[
          /* id */id,
          /* itemName */"",
          /* itemStatus : Open */0
        ];
}

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      return React.createElement("div", {
                  className: "container"
                }, React.createElement("div", {
                      className: "jumbotron"
                    }, React.createElement("h1", undefined, "Todo-App-Crap in React-Reason")), React.createElement("div", {
                      className: "row"
                    }, React.createElement("div", {
                          className: "col"
                        }, React.createElement("input", {
                              type: "text",
                              value: self[/* state */2][/* newItem */2][/* itemName */1],
                              onChange: Curry._1(self[/* reduce */1], (function ($$event) {
                                      return /* UpdateNewItem */Block.__(0, [$$event.target.value]);
                                    }))
                            }), React.createElement("button", {
                              className: "btn btn-primary",
                              onClick: Curry._1(self[/* reduce */1], (function () {
                                      return /* AddNewItem */0;
                                    }))
                            }, "Add"))), React.createElement("table", {
                      className: "table table-light table-striped table-bordered table-hover"
                    }, React.createElement("thead", {
                          className: "thead-dark"
                        }, React.createElement("tr", undefined, React.createElement("th", undefined, "Item"), React.createElement("th", undefined, "Status"), React.createElement("th", undefined, "Action"))), React.createElement("tbody", undefined, $$Array.map((function (item) {
                                return React.createElement("tr", {
                                            key: Pervasives.string_of_int(item[/* id */0])
                                          }, React.createElement("td", undefined, item[/* itemName */1]), React.createElement("td", undefined, printItemStatus(item[/* itemStatus */2])), React.createElement("td", undefined, React.createElement("button", {
                                                    className: "btn btn-primary"
                                                  }, "Close")));
                              }), $$Array.of_list(self[/* state */2][/* todolist */1])))));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* idCounter */0,
              /* todolist : [] */0,
              /* newItem : record */[
                /* id */0,
                /* itemName */"",
                /* itemStatus : Open */0
              ]
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (typeof action === "number") {
        console.log("AddNewItem");
        var newId = state[/* idCounter */0] + 1 | 0;
        var newItem_001 = /* itemName */state[/* newItem */2][/* itemName */1];
        var newItem = /* record */[
          /* id */newId,
          newItem_001,
          /* itemStatus : Open */0
        ];
        return /* Update */Block.__(0, [/* record */[
                    /* idCounter */newId,
                    /* todolist : :: */[
                      newItem,
                      state[/* todolist */1]
                    ],
                    /* newItem : record */[
                      /* id */newId,
                      /* itemName */"",
                      /* itemStatus : Open */0
                    ]
                  ]]);
      } else {
        switch (action.tag | 0) {
          case 0 : 
              var itemName = action[0];
              console.log("UpdateNewItem : " + itemName);
              var newItem$1 = state[/* newItem */2];
              return /* Update */Block.__(0, [/* record */[
                          /* idCounter */state[/* idCounter */0],
                          /* todolist */state[/* todolist */1],
                          /* newItem : record */[
                            /* id */newItem$1[/* id */0],
                            /* itemName */itemName,
                            /* itemStatus */newItem$1[/* itemStatus */2]
                          ]
                        ]]);
          case 1 : 
              var id = action[0];
              console.log("DeleteItem : " + Pervasives.string_of_int(id));
              return /* Update */Block.__(0, [/* record */[
                          /* idCounter */state[/* idCounter */0],
                          /* todolist */List.filter((function (item) {
                                    return +(item[/* id */0] === id);
                                  }))(state[/* todolist */1]),
                          /* newItem */state[/* newItem */2]
                        ]]);
          case 2 : 
              var id$1 = action[0];
              console.log("CloseItem : " + Pervasives.string_of_int(id$1));
              var todolist = List.map((function (item) {
                      var match = +(item[/* id */0] === id$1);
                      if (match !== 0) {
                        return /* record */[
                                /* id */item[/* id */0],
                                /* itemName */item[/* itemName */1],
                                /* itemStatus : Done */["jetzt"]
                              ];
                      } else {
                        return item;
                      }
                    }), state[/* todolist */1]);
              return /* Update */Block.__(0, [/* record */[
                          /* idCounter */state[/* idCounter */0],
                          /* todolist */todolist,
                          /* newItem */state[/* newItem */2]
                        ]]);
          
        }
      }
    });
  return newrecord;
}

exports.component       = component;
exports.str             = str;
exports.printItemStatus = printItemStatus;
exports.createNewItem   = createNewItem;
exports.make            = make;
/* component Not a pure module */
